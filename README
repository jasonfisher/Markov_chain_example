I posted this so I could get proof/disproof that my particular implementation of a Markov Chain works for all cases.  If you can tell me any new information either way I am very curious to learn more.  If it does work for all cases, it a simple, succinct, and (I think) efficient implementation of a Markov Chain and perhaps I’ll toss it into a gem on github.

I created this code in response to a programming quiz I received for a job application, but rather than follow their apparently-intended methodology using a weighted directed graph (based on their blank tests), I was inspired to try something else—a simple hash of arrays.  At the time I could find no other implementation of a Markov Chain using a hash of arrays (and no other simple library solutions, either), and it seemed plausible to me after thinking about it quite a bit.  My code works for all of their integrated tests (I left their unit tests blank as I didn’t use their graph code at all in my solution).

A bit of background:
The coding quiz/problem became interesting and fun and seemed cleverly designed, as the instructions in the README were vague (on purpose).  
For starters, the example 'sentence' produced isn't really a sentence, grammatically speaking, but rather a walk across the Markov chain.  
Also, while the underlying weighted directed graph implementation suggested by the stubs looked plausible, I figured the simpler thing to do would be to find an existing Markov chain ruby library online.  
I tested with the README usage instructions 'ruby generate.rb source/frankenstein.txt' and it seems to create a valid random Markov chain walk from any start node.  
Note that sentences can only be ended by words that ended sentences in the original text so sometimes the sentences can get pretty long.

The original setup can still be found at:
http://github.com/eandrejko/text-dynamo

Usage
To generate text using seed data from the input file:

ruby generate.rb source/frankenstein.txt
Which will generate a Markov chain from the input text and produce a randomly generated sentence.  E.g.:
Nearly all that I quitted your triumph over which ran through the cause of the hue of the reverse of the permission to bid a superior to speak.
